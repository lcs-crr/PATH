%implements s1_b0_8wvor_ZeroCrossings "C"

%function ZeroCrossings(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

NeslSimulationData *simulationData;
NeuDiagnosticManager *diagnosticManager;
NeuDiagnosticTree *diagnosticTree;
ZCV *_rtZCSV;
char *msg;
real_T tmp_p[16];
real_T time;
int32_T tmp_i;
int_T tmp_e[5];
boolean_T tmp;
%closefile localVarDecl
%<SLibCG_TrackZCSV(1)>\
_rtZCSV = %<(SLibCG_SE(SLibGetZCSignalValueStrucPtr()))>;
_rtZCSV->ekm3vjzjrp = rtB.n1kdcxnjx2 - rtP.PIDController_UpperSaturationLimit;
_rtZCSV->l1t4nu12xj = rtB.n1kdcxnjx2 - rtP.PIDController_LowerSaturationLimit;
simulationData = (NeslSimulationData *)rtDW.pg1peeaap2;
time = %<(SLibCG_SE(LibGetT()))>;
simulationData->mData->mTime.mN = 1;
simulationData->mData->mTime.mX = &time;
simulationData->mData->mContStates.mN = 337;
simulationData->mData->mContStates.mX = &rtX.effbkgmtax[0];
simulationData->mData->mDiscStates.mN = 0;
simulationData->mData->mDiscStates.mX = &rtDW.pahluld41k;
simulationData->mData->mModeVector.mN = 246;
simulationData->mData->mModeVector.mX = &rtDW.idk0zphtpp[0];
tmp = %<(SLibCG_SE(SLibCGIRGetSolverFoundZcEvents()))>;
simulationData->mData->mFoundZcEvents = tmp;
simulationData->mData->mIsMajorTimeStep = %<(SLibCG_SE(LibIsMajorTimeStep()))>;
tmp = %<(SLibCG_SE(SLibCGIRGetSolverAssertCheck()))>;
simulationData->mData->mIsSolverAssertCheck = tmp;
tmp = %<(SLibCG_SE(RTMIsSolverCheckingCIC()))>;
simulationData->mData->mIsSolverCheckingCIC = tmp;
tmp = %<(SLibCG_SE(RTMIsSolverComputingJacobian()))>;
simulationData->mData->mIsComputingJacobian = tmp;
simulationData->mData->mIsEvaluatingF0 = (%<(SLibCG_SE(RTMGetEvaluatingF0ForJacobian()))> != 0);
tmp = %<(SLibCG_SE(RTMIsSolverRequestingReset()))>;
simulationData->mData->mIsSolverRequestingReset = tmp;
simulationData->mData->mIsModeUpdateTimeStep = %<(SLibCG_SE(RTMGetIsModeUpdateTimeStep()))>;
tmp_e[0] = 0;
tmp_p[0] = rtB.g4x5d1kqrr[0];
tmp_p[1] = rtB.g4x5d1kqrr[1];
tmp_p[2] = rtB.g4x5d1kqrr[2];
tmp_p[3] = rtB.g4x5d1kqrr[3];
tmp_e[1] = 4;
tmp_p[4] = rtB.hmdfvofm2d[0];
tmp_p[5] = rtB.hmdfvofm2d[1];
tmp_p[6] = rtB.hmdfvofm2d[2];
tmp_p[7] = rtB.hmdfvofm2d[3];
tmp_e[2] = 8;
tmp_p[8] = rtB.c4vppbzui3[0];
tmp_p[9] = rtB.c4vppbzui3[1];
tmp_p[10] = rtB.c4vppbzui3[2];
tmp_p[11] = rtB.c4vppbzui3[3];
tmp_e[3] = 12;
tmp_p[12] = rtB.apvg0yhoqc[0];
tmp_p[13] = rtB.apvg0yhoqc[1];
tmp_p[14] = rtB.apvg0yhoqc[2];
tmp_p[15] = rtB.apvg0yhoqc[3];
tmp_e[4] = 16;
simulationData->mData->mInputValues.mN = 16;
simulationData->mData->mInputValues.mX = &tmp_p[0];
simulationData->mData->mInputOffsets.mN = 5;
simulationData->mData->mInputOffsets.mX = &tmp_e[0];
simulationData->mData->mNonSampledZCs.mN = 260;
simulationData->mData->mNonSampledZCs.mX = &_rtZCSV->j3tmiiikdj;
diagnosticManager = (NeuDiagnosticManager *)rtDW.bglls0p5vn;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
tmp_i = ne_simulator_method((NeslSimulator *)rtDW.b1a0qim2yg, NESL_SIM_ZEROCROSSINGS, simulationData, diagnosticManager);
if (tmp_i != 0) {
    tmp = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (tmp) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
_rtZCSV->awaaiifksz = rtB.cq3254ddmn - rtP.HitCrossing_Offset;
_rtZCSV->dbff0mlrju = rtB.ewjxc2rebf - rtP.Saturation_UpperSat;
_rtZCSV->ffnfdb2xsd = rtB.ewjxc2rebf - rtP.Saturation_LowerSat;
if (rtDW.m53bymnnod) {
    _rtZCSV->jgqexmifsh = rtB.ne3aknl42j - rtP.Relay_OffVal;
} else {
    _rtZCSV->jgqexmifsh = rtB.ne3aknl42j - rtP.Relay_OnVal;
}
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedZeroCrossingLocalVars", localVarDecl)>
%endfunction
%function ZeroCrossingsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ZeroCrossings(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 8, fcnProtoType)>
%endfunction
